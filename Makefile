# Makefile pour les tests natifs CARPE MODULE - Device Use Case
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -DNATIVE_BUILD -I. -Itest -Isrc
LDFLAGS = 

# Dossiers
SRC_DIR = src
TEST_DIR = test
BUILD_DIR = build

# Sources pour les diff√©rents tests
TEST_DEVICE_SOURCES = $(TEST_DIR)/device/test_setup_device.cpp $(TEST_DIR)/config/providers/MockConfigProvider.cpp $(TEST_DIR)/core/device/generators/MockDeviceIdGenerator.cpp

# Unity framework (t√©l√©charg√© depuis GitHub)
UNITY_DIR = unity
UNITY_SRC = $(UNITY_DIR)/src/unity.c

# Ex√©cutables
TARGET_DEVICE = $(BUILD_DIR)/test_device

all: $(TARGET_DEVICE)

# T√©l√©charger Unity si n√©cessaire
$(UNITY_DIR):
	@echo "T√©l√©chargement de Unity..."
	git clone https://github.com/ThrowTheSwitch/Unity.git $(UNITY_DIR)

# Cr√©er le dossier de build
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

# Compiler l'ex√©cutable de test device
$(TARGET_DEVICE): $(BUILD_DIR) $(UNITY_DIR) $(TEST_DEVICE_SOURCES)
	@echo "Compilation du test Device Use Case..."
	$(CXX) $(CXXFLAGS) -I$(UNITY_DIR)/src $(TEST_DEVICE_SOURCES) $(UNITY_SRC) -o $(TARGET_DEVICE)

# Lancer les tests device
test-device: $(TARGET_DEVICE)
	@echo "Ex√©cution du test Device Use Case..."
	$(TARGET_DEVICE)
	@echo ""
	@echo "‚úÖ Tous les tests du use case passent !"

# Lancer tous les tests (maintenant seulement device)
test: test-device
	@echo ""
	@echo "üéØ Tous les tests sont pass√©s avec succ√®s !"

# Nettoyer
clean:
	rm -rf $(BUILD_DIR)
	@echo "Nettoyage termin√©."

# Nettoyer compl√®tement (avec Unity)
clean-all: clean
	rm -rf $(UNITY_DIR)
	@echo "Nettoyage complet termin√©."

.PHONY: all test test-device clean clean-all 